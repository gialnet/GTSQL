/********************************************************************************
Acción: Inserta una nueva plusvalía.
MODIFICACIÓN: 28/08/2001 Antonio Pérez Caballero.
		Al crear las liquidaciones se han añadido dos nuevos parametros: 
 		contraido e IDAlternativo.
MODIFICACIÓN: 13/09/2001 Lucas Fernández Pérez. Adaptación al euro.
MODIFICACIÓN: 18/03/2002 Antonio Pérez Caballero
		Cambio de titularidad automático y conexión unívoca con IBI
MODIFICACIÓN: 06/02/2003 Mª del Carmen Junco Gómez. Al generar la liquidación se estaba pasando
    	como importe el total a ingresar, y no el pendiente. No tenía en cuenta lo ingresado por autoliquidación.
MODIFICACIÓN: 11/02/2003 Mª del Carmen Junco Gómez. La modificación anterior sólo es válida para Salobreña, pero 
    	no, por ejemplo, para Armilla. Se pone como una opción de configuración.
MODIFICACIÓN: 19/11/2003. Agustín León Robles. Se graba en la tabla de liquidaciones los 20 digitos de la
		referencia catastral y el número fijo 
MODIFICACIÓN: 06/04/2004 M. Carmen Junco Gómez. Se añade la columna IDPLUSVAC a la tabla de plusvalías para 
		indicar que la plusvalía con ID xID es complementaria a la que se generó con ID xIDPLUSVAC
MODIFICACIÓN: 15/05/2006 M. Carmen Junco Gómez. Adaptación al nuevo formato de RUSTICA
MODIFICACIÓN: 11/09/2006 Lucas Fernández Pérez. Nuevo parámetro de salida expediente con el número de expediente.
	Esto se hace porque hay posibilidad de indicar por configuración que el número se genere automáticamente, por lo
	que es necesario devolver el número generado.
	Si el parametro xExpe termina con una letra, no se genera un nuevo número, sino que se genera la 
	plusvalía con el valor de xExpe (por tratarse de multititularidad)
********************************************************************************/

CREATE OR REPLACE PROCEDURE INSERTA_PLUSVALIA(
    xMUNICIPIO	 				IN	CHAR,
	 xNIF_ADQUIRIENTE			IN	CHAR,
	 xNIF_REPRE_ADQUI			IN	CHAR,
	 xNIF_TRANSMITENTE			IN	CHAR,
	 xNIF_REPRE_TRANS			IN	CHAR,
 	 xREFE_CATASTRAL			IN  CHAR,
 	 xNUMERO_SECUENCIAL			IN	CHAR,
 	 xP_CARACTER_CONTROL		IN	CHAR,
 	 xS_CARACTER_CONTROL		IN	CHAR,
 	 xNumFijo					IN	CHAR,
	 xIDIBI						IN  INTEGER,
     xTOMO						IN  CHAR,
     xLIBRO						IN  CHAR,
     xFOLIO						IN  CHAR,
     xFINCA						IN  CHAR,
	 xVALOR_SUELO				IN	FLOAT,
     xV_SUELO_CORREGIDO     	IN	FLOAT,
	 xTIPO_GRAVAMEN				IN	FLOAT,
	 xOBJETO					IN	VARCHAR2,
	 xVIA						IN	CHAR,
	 xCALLE						IN	VARCHAR2,
	 xNUMERO					IN	CHAR,		
	 xESCALERA					IN	CHAR,
	 xPLANTA					IN	CHAR,
	 xPUERTA					IN	CHAR,
	 xCLASE						IN	CHAR, 
	 xTITULO					IN	CHAR, 
	 xNOTARIO					IN	INTEGER,
	 xPROTOCOLO					IN	CHAR,
	 xFECHA_ACTUAL				IN	DATE,
	 xFECHA_ESCRITURA			IN	DATE,
	 xFECHA_INICIAL				IN	DATE,
	 xEXPLICA_CORRECTOR			IN	VARCHAR2,
	 xPOR_PERIODICO				IN	FLOAT,
	 xBASE_IMPONIBLE			IN	FLOAT,
	 xCUOTA_BASE				IN	FLOAT,
	 xCUOTA_TRIBUTARIA			IN	FLOAT,
	 xCUOTA_LIQUIDA				IN	FLOAT,
	 xTOTAL_RECARGOS			IN	FLOAT,
	 xNUM_ANOS					IN	INTEGER,
     xF_CORRECTOR           	IN	FLOAT,
	 xPOR_BONIFICACION			IN	FLOAT,
	 xPOR_CORRECTOR				IN	FLOAT,
	 xPOR_RECARGO				IN	FLOAT,
	 xPOR_DEMORA				IN	FLOAT,
	 xIMPO_BONIFICACION			IN	FLOAT,
	 xIMPO_CORRECTOR			IN	FLOAT,
	 xIMPO_RECARGO				IN	FLOAT,
	 xIMPO_DEMORA				IN	FLOAT,
	 xINGRESADO_AUTOLIQUI		IN	FLOAT,
	 xTOTAL_INGRESAR			IN	FLOAT,
	 xFECHA						IN	DATE,
	 xF_FIN_PE_VOL				IN  DATE,
	 xNIF						IN	CHAR,
     xNIFREP                	IN	CHAR,
	 xDOMI						IN	VARCHAR2,
	 xEXPE						IN  CHAR,
	 xLIQUIDA					IN  CHAR,
	 xOBSERVA					IN  VARCHAR,
	 xIDAlternativo   			IN  INTEGER,
	 xIDPLUSVAC					IN	INTEGER,
	 xID						OUT INTEGER,
	 xEXPEDIENTE				OUT CHAR)
AS

  xLIQUI_SIN_CREAR EXCEPTION;
  xRECIBO		 CHAR(7);
  xLIQUI		 INTEGER;
  xCONCEPTO		 CHAR(6);	       
  xYEAR	 	     CHAR(4);
  xMOTIVO	     VARCHAR2(1024);
  xNOMBRENOTA    VARCHAR2(40);
  xCOMO_LIQUIDAR INTEGER;
  xIMPORTE		 FLOAT;
  xPLUSVA_EXPEDIENTE CHAR(9);
  xUltimoCaracter CHAR(1);


BEGIN

   SELECT YEAR_PLUSVA,COMO_LIQUIDAR_PLUSVA, PLUSVA_EXPEDIENTE
    INTO xYEAR,xCOMO_LIQUIDAR,xPLUSVA_EXPEDIENTE FROM DATOSPER WHERE MUNICIPIO=xMUNICIPIO;
    
   IF xPLUSVA_EXPEDIENTE='MANUAL' THEN
   	  xEXPEDIENTE:=xEXPE;
   ELSE
   	  xUltimoCaracter:=SUBSTR(xExpe,LENGTH(TRIM(xEXPE)),1);
   	  if trim(xEXPE) is null then

		xEXPEDIENTE:=GETPLUSVAEXPE(xMUNICIPIO); 
   	    
   	  elsif ((xUltimoCaracter<>'0') AND (xUltimoCaracter<>'1') AND (xUltimoCaracter<>'2') AND (xUltimoCaracter<>'3') AND
   	  	  (xUltimoCaracter<>'4') AND (xUltimoCaracter<>'5') AND (xUltimoCaracter<>'6') AND (xUltimoCaracter<>'7') AND
   	  	  (xUltimoCaracter<>'8') AND(xUltimoCaracter<>'9')) then -- no es un número, es multititularidad

		xEXPEDIENTE:=xEXPE;

   	  else -- obtiene el siguiente número de expediente de plusvalias para el ayto.
   	  
      	xEXPEDIENTE:=GETPLUSVAEXPE(xMUNICIPIO); 
      	
      end if;
   END IF;
   
   IF xCOMO_LIQUIDAR=0 THEN
      xIMPORTE:=xTOTAL_INGRESAR;
   ELSE
      xIMPORTE:=xTOTAL_INGRESAR-xINGRESADO_AUTOLIQUI;
   END IF;

   xCONCEPTO:=NULL;   
  
   -- AVERIGUAR QUE LIQUIDACIÓN LE CORRESPONDE A LA PLUSVALIA 

   SELECT LIQUIDACION INTO xCONCEPTO FROM PROGRAMAS WHERE PROGRAMA='PLUSVALIA';

   IF (xCONCEPTO IS NULL) THEN
      RAISE xLIQUI_SIN_CREAR;
   END IF;

   /* INSERTAR PRIMERO LA LIQUIDACIÓN PUES IRA UNIDA A LA PLUSVALIA DE FORMA UNIVOCA
      POR SU NUMERO DE ID DE LIQUIDACIONES */   
   SELECT NOMBRE INTO xNOMBRENOTA FROM NOTARIOS WHERE ID=xNOTARIO;     
   
   xMOTIVO:='PLUSVALIA DE '||xOBJETO||' SITUADA EN '||
             xVIA||' '||LTRIM(RTRIM(xCALLE))||' '||xNUMERO||' '||xESCALERA||
             xPLANTA||' '||xPUERTA||'  NOTARIO '||xNOMBRENOTA||'  PROTOCOLO Nº '||xPROTOCOLO;

   IF (xLIQUIDA='S') THEN

	ADD_LIQUI(xMUNICIPIO,xCONCEPTO,xYEAR,'00',xYEAR,xNIF,xNIFREP,xDOMI, xFECHA, xF_FIN_PE_VOL,
		xIMPORTE, xMOTIVO,'','',xEXPEDIENTE,xIDAlternativo,0,xRECIBO,xLIQUI);

   ELSE /* genera la liquidación pero con un importe igual a cero */

      ADD_LIQUI(xMUNICIPIO,xCONCEPTO,xYEAR,'00',xYEAR,xNIF,xNIFREP,xDOMI, xFECHA, xF_FIN_PE_VOL, 0,
		    xMOTIVO,'','',xEXPEDIENTE,xIDAlternativo,0,xRECIBO,xLIQUI);

   END IF;

   -- para guardar la referencia catastral en la liquidación 
   UPDATE LIQUIDACIONES SET 
   			REF_CATASTRAL=xREFE_CATASTRAL||xNUMERO_SECUENCIAL||xP_CARACTER_CONTROL||xS_CARACTER_CONTROL,
   			NUM_FIJO=xNumFijo
   WHERE ID=xLIQUI; 	 
   
   INSERT INTO PLUSVALIAS
     (MUNICIPIO,NIF_ADQUIRIENTE,NIF_REPRE_ADQUI,NIF_TRANSMITENTE,NIF_REPRE_TRANS,
      REFE_CATASTRAL,VALOR_SUELO,V_SUELO_CORREGIDO,F_CORRECTO,TIPO_GRAVAMEN,OBJETO,VIA,
	TOMO,LIBRO,FOLIO,FINCA,CALLE,NUMERO,ESCALERA,PLANTA,PUERTA,CLASE,TITULO,NOTARIO,
      PROTOCOLO,FECHA_ACTUAL,FECHA_ESCRITURA,FECHA_INICIAL,EXPLICA_CORRECTOR,POR_BONIFICACION,
	POR_CORRECTOR,POR_RECARGO,POR_DEMORA,IMPO_BONIFICACION,IMPO_CORRECTOR,IMPO_RECARGO,
	IMPO_DEMORA,INGRESADO_AUTOLIQUI,TOTAL_INGRESAR,EXPEDIENTE,LIQUIDACION,FECHA,YEAR,
	NUM_ANOS,POR_PERIODICO,BASE_IMPONIBLE,CUOTA_BASE,CUOTA_TRIBUTARIA,CUOTA_LIQUIDA,
      TOTAL_RECARGOS,LIQUIDABLE,OBSERVACIONES,IDDOMIALTER,IDIBI,IDPLUSVAC)
   VALUES
	(xMUNICIPIO,xNIF_ADQUIRIENTE,xNIF_REPRE_ADQUI,xNIF_TRANSMITENTE,xNIF_REPRE_TRANS,
	 xREFE_CATASTRAL,ROUND(xVALOR_SUELO,2),ROUND(xV_SUELO_CORREGIDO,2),xF_CORRECTOR,
       xTIPO_GRAVAMEN,xOBJETO,xVIA,xTOMO,xLIBRO,xFOLIO,xFINCA,xCALLE,xNUMERO,xESCALERA,xPLANTA,
	 xPUERTA,xCLASE,xTITULO,xNOTARIO,xPROTOCOLO,xFECHA_ACTUAL,xFECHA_ESCRITURA,xFECHA_INICIAL,
	 xEXPLICA_CORRECTOR,xPOR_BONIFICACION,xPOR_CORRECTOR,xPOR_RECARGO,xPOR_DEMORA,
	 ROUND(xIMPO_BONIFICACION,2),ROUND(xIMPO_CORRECTOR,2),ROUND(xIMPO_RECARGO,2),
	 ROUND(xIMPO_DEMORA,2),ROUND(xINGRESADO_AUTOLIQUI,2),ROUND(xTOTAL_INGRESAR,2),
	 SUBSTR(xEXPEDIENTE,1,10),xLIQUI,xFECHA,xYEAR,xNUM_ANOS,xPOR_PERIODICO,
	 ROUND(xBASE_IMPONIBLE,2),ROUND(xCUOTA_BASE,2),ROUND(xCUOTA_TRIBUTARIA,2),
	 ROUND(xCUOTA_LIQUIDA,2),ROUND(xTOTAL_RECARGOS,2),
	 xLIQUIDA,Ltrim(Rtrim(xOBSERVA)), 
	 DECODE(xIDAlternativo, 0, NULL, xIDAlternativo), xIDIBI,xIDPLUSVAC)

	RETURNING ID INTO xID;

   EXCEPTION 
    WHEN xLIQUI_SIN_CREAR THEN 	
        RAISE_APPLICATION_ERROR(-20000,'EL CONCEPTO ES NULO EN LA TABLA PROGRAMAS');

END;
/


/********************************************************************************
Acción: MODIFICAR UNA PLUSVALIA Y SU CORRESPONDIENTE LIQUIDACIÓN.
MODIFICACIÓN: 28/08/2001 Antonio Pérez Caballero.
MODIFICACIÓN: 13/09/2001 Lucas Fernández Pérez. Adaptación al euro.
MODIFICACIÓN: 06/02/2003 Mª del Carmen Junco Gómez. Al generar la liquidación se estaba pasando
    como importe el total a ingresar, y no el pendiente. No tenía en cuenta lo ingresado por autoliquidación.
MODIFICACIÓN: 11/02/2003 Mª del Carmen Junco Gómez. La modificación anterior sólo es válida para Salobreña, pero 
    no, por ejemplo, para Armilla. Se pone como una opción de configuración.
Modificacion: 19/11/2003. Agustín León Robles. Se graba en la tabla de liquidaciones los 20 digitos de la
	referencia catastral y el número fijo 

********************************************************************************/

CREATE OR REPLACE PROCEDURE MODIFICA_PLUSVALIA(
       xMUNICIPIO	            IN	CHAR,
  	 xID				IN	INTEGER,
	 xFECHA 			IN	DATE,
	 xF_FIN_PE_VOL		IN 	DATE,
	 xEXPEDIENTE		IN    CHAR,
	 xLIQUIDACION		IN    INTEGER,
	 xTIPO_GRAVAMEN		IN	FLOAT,
	 xNIF				IN    CHAR,       
     xNIFREP	            IN    CHAR,
	 xNIF_ADQUIRIENTE  	IN	CHAR,
	 xNIF_REPRE_ADQUI  	IN	CHAR,
	 xNIF_TRANSMITENTE	IN	CHAR,
	 xNIF_REPRE_TRANS		IN	CHAR,
	 xREFE_CATASTRAL		IN	CHAR,
 	 xNUMERO_SECUENCIAL		IN	CHAR,
 	 xP_CARACTER_CONTROL	IN	CHAR,
 	 xS_CARACTER_CONTROL	IN	CHAR,
 	 xNumFijo				IN	CHAR,
	 xIDIBI			IN    INTEGER,
	 xTOMO			IN    CHAR,
	 xLIBRO			IN    CHAR,
	 xFOLIO			IN    CHAR,
	 xFINCA			IN    CHAR,
	 xVALOR_SUELO		IN	FLOAT,
       xV_SUELO_CORREGIDO     IN	FLOAT,
	 xOBJETO			IN	VARCHAR,
	 xVIA				IN	CHAR,
	 xCALLE			IN	VARCHAR,
	 xNUMERO			IN	CHAR,		
	 xESCALERA			IN	CHAR,
	 xPLANTA			IN	CHAR,
	 xPUERTA			IN	CHAR,
	 xDOMI			IN    VARCHAR,
	 xCLASE			IN	CHAR, 
	 xTITULO			IN	CHAR, 
	 xNOTARIO			IN	INTEGER,
	 xPROTOCOLO			IN	CHAR,
	 xFECHA_ACTUAL		IN	DATE,
	 xFECHA_ESCRITURA		IN	DATE,
	 xFECHA_INICIAL		IN	DATE,
	 xEXPLICA_CORRECTOR	IN	VARCHAR,
	 xPOR_PERIODICO		IN	FLOAT,
	 xBASE_IMPONIBLE		IN	FLOAT,
	 xCUOTA_BASE		IN	FLOAT,
	 xCUOTA_TRIBUTARIA	IN	FLOAT,
	 xCUOTA_LIQUIDA		IN	FLOAT,
	 xTOTAL_RECARGOS		IN	FLOAT,
	 xNUM_ANOS			IN	INTEGER,
       xF_CORRECTOR           IN	FLOAT,
	 xPOR_BONIFICACION	IN	FLOAT,
	 xPOR_CORRECTOR		IN	FLOAT,
	 xPOR_RECARGO		IN	FLOAT,
	 xPOR_DEMORA		IN	FLOAT,
	 xIMPO_BONIFICACION	IN	FLOAT,
	 xIMPO_CORRECTOR		IN	FLOAT,
	 xIMPO_RECARGO		IN	FLOAT,
	 xIMPO_DEMORA		IN	FLOAT,
	 xINGRESADO_AUTOLIQUI	IN	FLOAT,
	 xTOTAL_INGRESAR		IN	FLOAT,
	 xLIQUIDA			IN    CHAR,
	 xOBSERVA			IN    VARCHAR,
	 xIDAlternativo   	IN 	INTEGER)
AS    
     
	xMOTIVO		VARCHAR(512);	
	xCOMO_LIQUIDAR   	INTEGER;
	xIMPORTE		FLOAT;
BEGIN

	SELECT COMO_LIQUIDAR_PLUSVA INTO xCOMO_LIQUIDAR FROM DATOSPER WHERE MUNICIPIO=xMUNICIPIO;
   
	IF xCOMO_LIQUIDAR=0 THEN
		xIMPORTE:=xTOTAL_INGRESAR;
	ELSE
		xIMPORTE:=xTOTAL_INGRESAR-xINGRESADO_AUTOLIQUI;
	END IF;

	xMOTIVO:='PLUSVALIA ' || xOBJETO;
 
	UPDATE LIQUIDACIONES SET 
			NIF=xNIF, 
			NIFREP=xNIFREP,
			DOMI_TRIBUTARIO=rtrim(xDOMI), 
			F_LIQUIDACION=xFECHA,
			IMPORTE=DECODE(xLIQUIDA,'S',xIMPORTE,0),
			MOTIVO=rtrim(xMOTIVO), 
			EXPEDIENTE=rtrim(xEXPEDIENTE),			
			REF_CATASTRAL=xREFE_CATASTRAL||xNUMERO_SECUENCIAL||xP_CARACTER_CONTROL||xS_CARACTER_CONTROL,
   			NUM_FIJO=xNumFijo,			
			IDDOMIALTER=DECODE(xIDAlternativo, 0, NULL, xIDAlternativo),
--en el trigger T_UPD_LIQUIDACIONES de la tabla de liquidaciones se graban los datos del C60
			F_JULIANA=DECODE(TO_CHAR(xF_FIN_PE_VOL,'YYYY'),'1899',NULL,TO_CHAR(xF_FIN_PE_VOL,'ddd'))
			
	WHERE ID=xLIQUIDACION;

      
	UPDATE PLUSVALIAS SET MUNICIPIO=xMUNICIPIO,NIF_ADQUIRIENTE=xNIF_ADQUIRIENTE,
		NIF_REPRE_ADQUI=xNIF_REPRE_ADQUI,NIF_TRANSMITENTE=xNIF_TRANSMITENTE,
		NIF_REPRE_TRANS=xNIF_REPRE_TRANS, REFE_CATASTRAL=xREFE_CATASTRAL,
		VALOR_SUELO=ROUND(xVALOR_SUELO,2),V_SUELO_CORREGIDO=ROUND(xV_SUELO_CORREGIDO,2),
		F_CORRECTO=xF_CORRECTOR,OBJETO=xOBJETO,VIA=xVIA,CALLE=xCALLE,NUMERO=xNUMERO,
		ESCALERA=xESCALERA,PLANTA=xPLANTA,PUERTA=xPUERTA,CLASE=xCLASE,
		TITULO=xTITULO,NOTARIO=xNOTARIO,PROTOCOLO=xPROTOCOLO,FECHA_ACTUAL=xFECHA_ACTUAL,
		FECHA_ESCRITURA=xFECHA_ESCRITURA,FECHA_INICIAL=xFECHA_INICIAL,
		EXPLICA_CORRECTOR=xEXPLICA_CORRECTOR,POR_BONIFICACION=xPOR_BONIFICACION,
		POR_CORRECTOR=xPOR_CORRECTOR,POR_RECARGO=xPOR_RECARGO,POR_DEMORA=xPOR_DEMORA,
		IMPO_BONIFICACION=ROUND(xIMPO_BONIFICACION,2),IMPO_CORRECTOR=ROUND(xIMPO_CORRECTOR,2),
		IMPO_RECARGO=ROUND(xIMPO_RECARGO,2),IMPO_DEMORA=ROUND(xIMPO_DEMORA,2), 
		INGRESADO_AUTOLIQUI=ROUND(xINGRESADO_AUTOLIQUI,2),
		TOTAL_INGRESAR=ROUND(xTOTAL_INGRESAR,2),
		TIPO_GRAVAMEN=xTIPO_GRAVAMEN,POR_PERIODICO=xPOR_PERIODICO,
		BASE_IMPONIBLE=ROUND(xBASE_IMPONIBLE,2),CUOTA_BASE=ROUND(xCUOTA_BASE,2),
		CUOTA_TRIBUTARIA=ROUND(xCUOTA_TRIBUTARIA,2),CUOTA_LIQUIDA=ROUND(xCUOTA_LIQUIDA,2),
		TOTAL_RECARGOS=ROUND(xTOTAL_RECARGOS,2),NUM_ANOS=xNUM_ANOS,TOMO=xTOMO,LIBRO=xLIBRO,
		FOLIO=xFOLIO,FINCA=xFINCA,EXPEDIENTE=rtrim(xEXPEDIENTE), LIQUIDABLE=xLIQUIDA, 
		OBSERVACIONES=rtrim(xOBSERVA),
		IDDOMIALTER=DECODE(xIDAlternativo, 0, NULL, xIDAlternativo),
		IDIBI=xIDIBI
	WHERE ID=xID;

END;
/

/********************************************************************************
Acción: Añadir o modificar los tipos.
********************************************************************************/

CREATE OR REPLACE PROCEDURE ADD_MOD_TIPOS_PLUSVALIAS(
	 xAYTO		IN	CHAR,
	 xALTA		IN	CHAR,
	 xYEAR		IN	CHAR,
	 xPOR_1_5		IN	FLOAT ,
	 xPOR_6_10		IN	FLOAT ,
	 xPOR_11_15		IN	FLOAT ,
	 xPOR_16_20		IN	FLOAT ,
	 xGRA_1_5		IN	FLOAT ,
	 xGRA_6_10		IN	FLOAT ,
	 xGRA_11_15		IN	FLOAT ,
	 xGRA_16_20		IN	FLOAT 
)

AS

   xANNO CHAR(4);

BEGIN

   IF (xALTA='S') THEN
	INSERT INTO TIPOS_PLUSVALIAS
	      (MUNICIPIO,YEAR,POR_1_5,POR_6_10,POR_11_15,POR_16_20,GRA_1_5,GRA_6_10,
		 GRA_11_15,GRA_16_20)
	VALUES(xAYTO,xYEAR,xPOR_1_5,xPOR_6_10,xPOR_11_15,xPOR_16_20,xGRA_1_5,xGRA_6_10,
		     xGRA_11_15,xGRA_16_20);	   
   ELSE
	UPDATE TIPOS_PLUSVALIAS SET POR_1_5=xPOR_1_5,
	  				    POR_6_10=xPOR_6_10,
 					    POR_11_15=xPOR_11_15,
					    POR_16_20=xPOR_16_20,
					    GRA_1_5=xGRA_1_5,
					    GRA_6_10=xGRA_6_10,
					    GRA_11_15=xGRA_11_15,
					    GRA_16_20=xGRA_16_20
      WHERE MUNICIPIO=xAYTO AND YEAR=xYEAR;

   END IF;

END;
/

/********************************************************************************
Acción: Para dar de baja y restaurar una plusvalía.
********************************************************************************/

CREATE OR REPLACE PROCEDURE DAR_BAJA_RESTAURA_PLUSVA(
       xID        IN INTEGER,
       xFECHA     IN DATE
)
AS

   xOLD_FECHA	DATE;
   xLIQUI		INTEGER;

BEGIN

   SELECT LIQUIDACION,FECHA_BAJA INTO xLIQUI,xOLD_FECHA FROM PLUSVALIAS 
   WHERE ID=xID;
   
   IF (xOLD_FECHA IS NULL) THEN 

	UPDATE PLUSVALIAS SET FECHA_BAJA=xFECHA 
	WHERE ID=xID;

      UPDATE LIQUIDACIONES SET F_ANULACION=xFECHA
      WHERE ID=xLIQUI;
   ELSE

	UPDATE PLUSVALIAS SET FECHA_BAJA=NULL 
	WHERE ID=xID;

      UPDATE LIQUIDACIONES SET F_ANULACION=NULL
      WHERE ID=xLIQUI;
   END IF;

END;
/

/*******************************************************************************
Acción: Impresión de plusvalías.
MODIFICACIÓN: 30/08/2001 Agustin Leon Robles.
		Se ha añadido el domicilio alternativo en el documento impreso.
MODIFICACIÓN: 14/09/2001 Lucas Fernández Pérez. Adaptación al euro.
MODIFICACIÓN: 11/03/2003. Lucas Fernández Pérez. No calculaba bien el codigo de barras,
		puesto que el importe lo ponía en 7 caracteres en vez de en 8 como es necesario.
MODIFICACIÓN: 07/05/2003 M. Carmen Junco Gómez. Se añade un campo con la fecha actual.
MODIFICACIÓN: 31/10/2003 Gloria María Calle Hernández. Se añaden campos N_Resolucion 
		y D_Resolucion
MODIFICACIÓN: 19/11/2003 Agustín León Robles. Se recoge los datos de la referencia catastral
 		y numero fijo de la tabla de liquidaciones en vez de la tabla de IBI
MODIFICACIÓN: 09/02/2004 Mª Carmen Junco Gómez. Se añade un nuevo título: Compra Venta No residente,
 		para cuando el transmitente sea extranjero. En ese caso el obligado al pago es
 		el adquiriente.
MODIFICACIÓN: 06/04/2004 M. Carmen Junco Gómez. Se añade la columna IDPLUSVAC a la tabla de plusvalías para 
		indicar que la plusvalía con ID xID es complementaria a la que se generó con ID xIDPLUSVAC
MODIFICACIÓN:  05/02/2007. Lucas Fernández Pérez. Se accede al campo DOMICILIO de la nueva vista vwCONTRIBUYENTES
				Se elimina la llamada a Conca_Domicilio
**********************************************************************************/

CREATE OR REPLACE PROCEDURE PROC_TABLA_PLUSVA(xID IN INTEGER)
AS

	xLIQUIDACION					CHAR(7);
	xDomiAlternativo				varchar2(150);

	xSUJETO_ADQUIRENTE			CHAR(35);
	xSUJETO_TRANSMITENTE 		CHAR(35);
	xCLASE							CHAR(10);
	xTITULO							CHAR(20);
   xNOMBRENOTA						VARCHAR2(40);
	xIMPO_PERIODICO				VARCHAR(6);
	xSUMA_PORCENTAJE				FLOAT;
	xPOBLACION						VARCHAR(40);
	xALCALDE							VARCHAR(50);
	xDOMICILIO 						VARCHAR2(60);
	xPENDIENTE 						FLOAT;

	/*ADQUIRENTE*/
	xNOMBRE_ADQUIRENTE 			VARCHAR(40);
	xPOBLACION_ADQUIRENTE 		VARCHAR(35);
	xPROVINCIA_ADQUIRENTE 		VARCHAR(35);
	xCP_ADQUIRENTE 				CHAR(5);
	xPAIS_ADQUIRENTE 				VARCHAR(35);
	xDIRECCION_ADQUIRENTE 		VARCHAR(60);

	/*REPRESENTANTE ADQUIRENTE*/
	xNOMBRE_RE_ADQUIRENTE 		VARCHAR(40);
	xPOBLACION_RE_ADQUIRENTE	VARCHAR(35);
	xPROVINCIA_RE_ADQUIRENTE 	VARCHAR(35);
	xCP_RE_ADQUIRENTE 			CHAR(5);
	xPAIS_RE_ADQUIRENTE 			VARCHAR(35);
	xDIRECCION_RE_ADQUIRENTE 	VARCHAR(60);
	
	/*TRANSMITENTE*/
	xNOMBRE_TRANSMITENTE 		VARCHAR(40);
	xPOBLACION_TRANSMITENTE 	VARCHAR(35);
	xPROVINCIA_TRANSMITENTE 	VARCHAR(35);
	xCP_TRANSMITENTE 				CHAR(5);
	xPAIS_TRANSMITENTE 			VARCHAR(35);
	xDIRECCION_TRANSMITENTE 	VARCHAR(60);

	/*REPRESENTANTE TRANSMITENTE*/
	xNOMBRE_RE_TRANSMITENTE   	VARCHAR(40);
	xPOBLACION_RE_TRANSMITENTE VARCHAR(35);
	xPROVINCIA_RE_TRANSMITENTE VARCHAR(35);
	xCP_RE_TRANSMITENTE 	  		CHAR(5);
	xPAIS_RE_TRANSMITENTE 	  	VARCHAR(35);
	xDIRECCION_RE_TRANSMITENTE VARCHAR(60);

	--datos para imprimir en formato cuaderno 60 modalidad 2
	xEMISOR 							CHAR(6);
	xTRIBUTO 						CHAR(3);
	xEJER_C60 						CHAR(2);
	xREFERENCIA						CHAR(10);
	xIMP_CADENA						CHAR(12);
	xDISCRI_PERIODO 				CHAR(1);
	xDIGITO_YEAR 					CHAR(1);
	xF_JULIANA 						CHAR(3);
	xDIGITO_C60_MODALIDAD2 		CHAR(2);
	xF_FIN_PE_VOL	 				DATE;

	xNOMBRE_DESTINATARIO			VARCHAR(40);
	xDIRECCION_DESTINATARIO		VARCHAR(60);
	xCP_DESTINATARIO				CHAR(5);
	xPOBLACION_DESTINATARIO		VARCHAR(35);
	xPROVINCIA_DESTINATARIO		VARCHAR(35);
	xNIF_DESTINATARIO				VARCHAR(10);
	xNIF_REPRE_FINAL				VARCHAR(10);
	xNOMBRE_REPRE_FINAL			VARCHAR(40);

	xNUM_FIJO						VARCHAR(8);
	xNUM_SECUENCIAL				VARCHAR(4);
	xPRIMER_CC						VARCHAR(1);
	xSEGUN_CC						VARCHAR(1);
	
	xN_RESOLUCION					CHAR(12);
	xF_RESOLUCION					DATE;
	
	xIDLIQUICOMPLE					INTEGER;
	xLIQUICOMPLE					CHAR(7);
	xIMPCOMPLE						FLOAT;

	v_Plusvalia						Plusvalias%ROWTYPE;
BEGIN


	SELECT * into v_Plusvalia FROM PLUSVALIAS WHERE ID=xID;
	
	-- si es una plusvalía que complementa a otra recogemos el nº de liquidación e importe de la complementada
	IF (v_Plusvalia.IDPLUSVAC > 0) THEN 
		begin
			SELECT LIQUIDACION INTO xIDLIQUICOMPLE FROM PLUSVALIAS WHERE ID=v_Plusvalia.IDPLUSVAC;
			Exception
				When no_data_found then
					xIDLIQUICOMPLE:=0;
		end;
	END IF;
	
	IF xIDLIQUICOMPLE>0 THEN
		SELECT NUMERO,IMPORTE INTO xLIQUICOMPLE,xIMPCOMPLE 
		FROM LIQUIDACIONES WHERE ID=xIDLIQUICOMPLE;
	END IF;

	xIMPO_PERIODICO:=v_Plusvalia.POR_PERIODICO*v_Plusvalia.NUM_ANOS;
	xSUMA_PORCENTAJE:=v_Plusvalia.POR_CORRECTOR+v_Plusvalia.POR_DEMORA+
				v_Plusvalia.POR_RECARGO-v_Plusvalia.POR_BONIFICACION;
	xPENDIENTE:=ROUND(v_Plusvalia.TOTAL_INGRESAR-v_Plusvalia.INGRESADO_AUTOLIQUI,2);

	SELECT DameDomiAlternativo(v_Plusvalia.IDDOMIALTER) into xDomiAlternativo FROM DUAL;

	--ADQUIRENTE
	BEGIN
         SELECT NOMBRE,POBLACION,PROVINCIA,CODIGO_POSTAL,PAIS,DOMICILIO
         INTO xNOMBRE_ADQUIRENTE,xPOBLACION_ADQUIRENTE,xPROVINCIA_ADQUIRENTE,
	            xCP_ADQUIRENTE,xPAIS_ADQUIRENTE,xDIRECCION_ADQUIRENTE 
	   FROM vwCONTRIBUYENTES
         WHERE NIF=v_Plusvalia.NIF_ADQUIRIENTE;
		
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		   NULL;
	END;


	--REPRESENTANTE ADQUIRENTE
	BEGIN
    	SELECT NOMBRE,POBLACION,PROVINCIA,CODIGO_POSTAL,PAIS,DOMICILIO
    	INTO xNOMBRE_RE_ADQUIRENTE,xPOBLACION_RE_ADQUIRENTE,xPROVINCIA_RE_ADQUIRENTE,
			xCP_RE_ADQUIRENTE,xPAIS_RE_ADQUIRENTE,xDIRECCION_RE_ADQUIRENTE
	   	FROM vwCONTRIBUYENTES WHERE NIF=v_Plusvalia.NIF_REPRE_ADQUI;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		   NULL;
      END;


	--TRANSMITENTE
	BEGIN
    	SELECT NOMBRE,POBLACION,PROVINCIA,CODIGO_POSTAL,PAIS,DOMICILIO
		INTO xNOMBRE_TRANSMITENTE,xPOBLACION_TRANSMITENTE,xPROVINCIA_TRANSMITENTE,
			xCP_TRANSMITENTE,xPAIS_TRANSMITENTE,xDIRECCION_TRANSMITENTE
		FROM vwCONTRIBUYENTES WHERE NIF=v_Plusvalia.NIF_TRANSMITENTE;

	   EXCEPTION
	      WHEN NO_DATA_FOUND THEN
		   NULL;
	END;


	-- REPRESENTANTE TRANSMITENTE
	BEGIN
    	SELECT NOMBRE,POBLACION,PROVINCIA,CODIGO_POSTAL,PAIS,DOMICILIO
	   	INTO xNOMBRE_RE_TRANSMITENTE,xPOBLACION_RE_TRANSMITENTE,xPROVINCIA_RE_TRANSMITENTE,
			xCP_RE_TRANSMITENTE,xPAIS_RE_TRANSMITENTE,xDIRECCION_RE_TRANSMITENTE
     	FROM vwCONTRIBUYENTES WHERE NIF=v_Plusvalia.NIF_REPRE_TRANS;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		   NULL;
	END;

	-- Para saber quien paga la liquidacion de la plusvalia
 	IF (v_Plusvalia.TITULO='C') OR (v_Plusvalia.TITULO='A') THEN

		IF v_Plusvalia.NIF_REPRE_TRANS IS NULL THEN
			xNOMBRE_DESTINATARIO:=xNOMBRE_TRANSMITENTE;
			xDIRECCION_DESTINATARIO:=xDIRECCION_TRANSMITENTE;
			xCP_DESTINATARIO:=xCP_TRANSMITENTE;
			xPOBLACION_DESTINATARIO:=xPOBLACION_TRANSMITENTE;
			xPROVINCIA_DESTINATARIO:=xPROVINCIA_TRANSMITENTE;
			xNIF_DESTINATARIO:=v_Plusvalia.NIF_TRANSMITENTE;
		ELSE
			xNOMBRE_DESTINATARIO:=xNOMBRE_RE_TRANSMITENTE;
			xDIRECCION_DESTINATARIO:=xDIRECCION_RE_TRANSMITENTE;
			xCP_DESTINATARIO:=xCP_RE_TRANSMITENTE;
			xPOBLACION_DESTINATARIO:=xPOBLACION_RE_TRANSMITENTE;
			xPROVINCIA_DESTINATARIO:=xPROVINCIA_RE_TRANSMITENTE;
			xNIF_DESTINATARIO:=v_Plusvalia.NIF_REPRE_TRANS;

			xNIF_REPRE_FINAL:=v_Plusvalia.NIF_REPRE_TRANS;
			xNOMBRE_REPRE_FINAL:=xNOMBRE_RE_TRANSMITENTE;

		END IF;

	ELSIF (v_Plusvalia.TITULO='H') OR (v_Plusvalia.TITULO='D') OR (v_Plusvalia.TITULO='R') THEN
		
		IF v_Plusvalia.NIF_REPRE_ADQUI IS NULL THEN
			xNOMBRE_DESTINATARIO:=xNOMBRE_ADQUIRENTE;
			xDIRECCION_DESTINATARIO:=xDIRECCION_ADQUIRENTE;
			xCP_DESTINATARIO:=xCP_ADQUIRENTE;
			xPOBLACION_DESTINATARIO:=xPOBLACION_ADQUIRENTE;
			xPROVINCIA_DESTINATARIO:=xPROVINCIA_ADQUIRENTE;
			xNIF_DESTINATARIO:=v_Plusvalia.NIF_ADQUIRIENTE;
		ELSE
			xNOMBRE_DESTINATARIO:=xNOMBRE_RE_ADQUIRENTE;
			xDIRECCION_DESTINATARIO:=xDIRECCION_RE_ADQUIRENTE;
			xCP_DESTINATARIO:=xCP_RE_ADQUIRENTE;
			xPOBLACION_DESTINATARIO:=xPOBLACION_RE_ADQUIRENTE;
			xPROVINCIA_DESTINATARIO:=xPROVINCIA_RE_ADQUIRENTE;
			xNIF_DESTINATARIO:=v_Plusvalia.NIF_REPRE_ADQUI;

			xNIF_REPRE_FINAL:=v_Plusvalia.NIF_REPRE_ADQUI;
			xNOMBRE_REPRE_FINAL:=xNOMBRE_RE_ADQUIRENTE;

		END IF;
	END IF;


 	IF (v_Plusvalia.TITULO='C') THEN
	   xSUJETO_ADQUIRENTE:='DATOS ADQUIRIENTE';
	   xSUJETO_TRANSMITENTE:='DATOS TRANSMITENTE (SUJETO PASIVO)';
	   xCLASE:='ONEROSA';
	   xTITULO:='COMPRA-VENTA';
	 
	ELSIF (v_Plusvalia.TITULO='R') THEN
	   xSUJETO_ADQUIRENTE:='DATOS ADQUIRIENTE (SUJETO PASIVO)';
	   xSUJETO_TRANSMITENTE:='DATOS TRANSMITENTE';
	   xCLASE:='ONEROSA';
	   xTITULO:='CV NO RESIDENTE';

	ELSIF (v_Plusvalia.TITULO='A') THEN
       xSUJETO_ADQUIRENTE:='DATOS ADQUIRIENTE (SUJETO PASIVO)';
	   xSUJETO_TRANSMITENTE:='DATOS TRANSMITENTE';
	   xCLASE:='ONEROSA';
       xTITULO:='APORTACIÓN SOCIAL';

	ELSIF (v_Plusvalia.TITULO='H') THEN
	   xSUJETO_ADQUIRENTE:='DATOS ADQUIRIENTE (SUJETO PASIVO)';
	   xSUJETO_TRANSMITENTE:='DATOS CAUSANTE';
	   xCLASE:='LUCRATIVA';
	   xTITULO:='HERENCIA';

	ELSIF (v_Plusvalia.TITULO='D') THEN
	   xSUJETO_ADQUIRENTE:='DATOS ADQUIRIENTE (SUJETO PASIVO)';
	   xSUJETO_TRANSMITENTE:='DATOS TRANSMITENTE';
	   xCLASE:='LUCRATIVA';
	   xTITULO:='DONACIÓN'; 
	END IF;


	--datos del municipio de donde es la plusvalia
	BEGIN
    	   SELECT POBLACION,ALCALDE INTO xPOBLACION,xALCALDE FROM DATOSPER 
			WHERE MUNICIPIO=v_Plusvalia.MUNICIPIO;
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN
		   NULL;
  	END;

	SELECT EMISOR,TRIBUTO,EJER_C60,REFERENCIA,IMP_CADENA,DISCRI_PERIODO,
		DIGITO_YEAR,F_JULIANA,DIGITO_C60_MODALIDAD2,F_FIN_PE_VOL,NUMERO 
	INTO xEMISOR,xTRIBUTO,xEJER_C60,xREFERENCIA,xIMP_CADENA,xDISCRI_PERIODO,
		xDIGITO_YEAR,xF_JULIANA,xDIGITO_C60_MODALIDAD2,xF_FIN_PE_VOL,xLIQUIDACION
	FROM LIQUIDACIONES WHERE ID=v_Plusvalia.LIQUIDACION;

  	xDOMICILIO:=rtrim(v_Plusvalia.VIA)||' '||rTrim(v_Plusvalia.CALLE)||' '||rTrim(v_Plusvalia.NUMERO)
  					||' '||rTrim(v_Plusvalia.ESCALERA)||' '||rTrim(v_Plusvalia.PLANTA)||' '||rTrim(v_Plusvalia.PUERTA);

    -- NOTARIO 
    SELECT NOMBRE INTO xNOMBRENOTA FROM NOTARIOS WHERE ID=v_Plusvalia.NOTARIO;
	

	--Datos N_Resolucion y F_Resolucion de Liquidaciones
	--En principio siempre existe una liquidación por plusvalia, no haría falta proteger el select...
	BEGIN
    	SELECT SUBSTR(REF_CATASTRAL,15,4),SUBSTR(REF_CATASTRAL,19,1),SUBSTR(REF_CATASTRAL,20,1),NUM_FIJO,
    		N_RESOLUCION,F_RESOLUCION 
    	INTO xNUM_SECUENCIAL,xPRIMER_CC,xSEGUN_CC,xNUM_FIJO,xN_RESOLUCION, xF_RESOLUCION
	    FROM LIQUIDACIONES WHERE ID=v_Plusvalia.LIQUIDACION;
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN
		   xN_RESOLUCION:= NULL;
		   xF_RESOLUCION:= NULL;
  	END;

  	INSERT INTO TABLA_PLUSVA 
  	     (ID,EXPEDIENTE,LIQUIDACION,FECHA,NIF_ADQUIRENTE,SUJETO_ADQUIRENTE,NIF_REPRE_ADQUI,			
		NIF_TRANSMITENTE,SUJETO_TRANSMITENTE,NIF_REPRE_TRANS,REFE_CATASTRAL,
		TOMO,LIBRO,FOLIO,FINCA,VALOR_SUELO,V_SUELO_CORREGIDO,OBJETO,CLASE,TITULO,NOTARIO,
            NOMBRENOTA,PROTOCOLO,FECHA_ACTUAL,FECHA_ESCRITURA,FECHA_INICIAL,FECHA_BAJA,
		EXPLICA_BAJA,EXPLICA_CORRECTOR,TIPO_GRAVAMEN,POR_PERIODICO,IMPO_PERIODICO,
		SUMA_PORCENTAJE,BASE_IMPONIBLE,CUOTA_BASE,CUOTA_TRIBUTARIA,CUOTA_LIQUIDA,
		TOTAL_RECARGOS,POBLACION,ALCALDE,NUM_ANOS,F_CORRECTOR,POR_BONIFICACION,
		POR_CORRECTOR,POR_RECARGO,POR_DEMORA,IMPO_BONIFICACION,IMPO_CORRECTOR,
		IMPO_RECARGO,IMPO_DEMORA,INGRESADO_AUTOLIQUI,TOTAL_INGRESAR,
		DOMICILIO,DOMICILIO_ALTERNATIVO,

		PENDIENTE,NOMBRE_ADQUIRENTE,POBLACION_ADQUIRENTE,PROVINCIA_ADQUIRENTE,
		CP_ADQUIRENTE,PAIS_ADQUIRENTE,DIRECCION_ADQUIRENTE,NOMBRE_RE_ADQUIRENTE,
		POBLACION_RE_ADQUIRENTE,PROVINCIA_RE_ADQUIRENTE,CP_RE_ADQUIRENTE,
		PAIS_RE_ADQUIRENTE,DIRECCION_RE_ADQUIRENTE,NOMBRE_TRANSMITENTE,
		POBLACION_TRANSMITENTE,PROVINCIA_TRANSMITENTE,CP_TRANSMITENTE,			
		PAIS_TRANSMITENTE,DIRECCION_TRANSMITENTE,NOMBRE_RE_TRANSMITENTE,
		POBLACION_RE_TRANSMITENTE,PROVINCIA_RE_TRANSMITENTE,CP_RE_TRANSMITENTE,
		PAIS_RE_TRANSMITENTE,DIRECCION_RE_TRANSMITENTE,ANO,

		EMISOR,TRIBUTO,EJER_C60,REFERENCIA,IMP_CADENA,DISCRI_PERIODO,
		DIGITO_YEAR,F_JULIANA,DIGITO_C60_MODALIDAD2,F_FIN_PE_VOL,CODIGO_BARRAS,

		MES_FECHA_INICIAL, MES_FECHA_ACTUAL, NIF_REPRE_FINAL, NOMBRE_REPRE_FINAL,
		NOMBRE_DESTINATARIO_PLUSVA, DIRECCION_DESTINATARIO_PLUSVA, 
		CP_DESTINATARIO_PLUSVA, POBLACION_DESTINATARIO_PLUSVA,
		PROVINCIA_DESTINATARIO_PLUSVA,NIF_DESTINATARIO_PLUSVA,
		VIA_INMUEBLE, CALLE_INMUEBLE, NUMERO_INMUEBLE, ESCALERA_INMUEBLE,
		PLANTA_INMUEBLE, PUERTA_INMUEBLE,
		NUM_FIJO,NUMERO_SECUENCIAL,PRIMER_CARACTER_CONTROL,SEGUN_CARACTER_CONTROL,
		FECHA_HOY,
		
		N_RESOLUCION,F_RESOLUCION,NLIQUICOMPLE,IMPORTECOMPLE)
		
	VALUES
	     (xID,v_Plusvalia.EXPEDIENTE,xLIQUIDACION,v_Plusvalia.FECHA,
		v_Plusvalia.NIF_ADQUIRIENTE,xSUJETO_ADQUIRENTE,v_Plusvalia.NIF_REPRE_ADQUI,			
		v_Plusvalia.NIF_TRANSMITENTE,xSUJETO_TRANSMITENTE,v_Plusvalia.NIF_REPRE_TRANS,
		v_Plusvalia.REFE_CATASTRAL,v_Plusvalia.TOMO,v_Plusvalia.LIBRO,v_Plusvalia.FOLIO,
		v_Plusvalia.FINCA,v_Plusvalia.VALOR_SUELO,v_Plusvalia.V_SUELO_CORREGIDO,
		v_Plusvalia.OBJETO,xCLASE,xTITULO,v_Plusvalia.NOTARIO,
		xNOMBRENOTA,v_Plusvalia.PROTOCOLO,v_Plusvalia.FECHA_ACTUAL,
		v_Plusvalia.FECHA_ESCRITURA,v_Plusvalia.FECHA_INICIAL,v_Plusvalia.FECHA_BAJA,
		v_Plusvalia.EXPLICA_BAJA,v_Plusvalia.EXPLICA_CORRECTOR,v_Plusvalia.TIPO_GRAVAMEN,
		v_Plusvalia.POR_PERIODICO,xIMPO_PERIODICO,
		xSUMA_PORCENTAJE,v_Plusvalia.BASE_IMPONIBLE,v_Plusvalia.CUOTA_BASE,
		v_Plusvalia.CUOTA_TRIBUTARIA,v_Plusvalia.CUOTA_LIQUIDA,
		v_Plusvalia.TOTAL_RECARGOS,

		xPOBLACION,xALCALDE,v_Plusvalia.NUM_ANOS,v_Plusvalia.F_CORRECTO,
		v_Plusvalia.POR_BONIFICACION,v_Plusvalia.POR_CORRECTOR,v_Plusvalia.POR_RECARGO,
		v_Plusvalia.POR_DEMORA,v_Plusvalia.IMPO_BONIFICACION,v_Plusvalia.IMPO_CORRECTOR,
		v_Plusvalia.IMPO_RECARGO,v_Plusvalia.IMPO_DEMORA,
		v_Plusvalia.INGRESADO_AUTOLIQUI,v_Plusvalia.TOTAL_INGRESAR,

		xDOMICILIO,xDomiAlternativo,

		ROUND(xPENDIENTE,2),xNOMBRE_ADQUIRENTE,xPOBLACION_ADQUIRENTE,xPROVINCIA_ADQUIRENTE,
		xCP_ADQUIRENTE,xPAIS_ADQUIRENTE,xDIRECCION_ADQUIRENTE,xNOMBRE_RE_ADQUIRENTE,
		xPOBLACION_RE_ADQUIRENTE,xPROVINCIA_RE_ADQUIRENTE,xCP_RE_ADQUIRENTE,
		xPAIS_RE_ADQUIRENTE,xDIRECCION_RE_ADQUIRENTE,xNOMBRE_TRANSMITENTE,
		xPOBLACION_TRANSMITENTE,xPROVINCIA_TRANSMITENTE,xCP_TRANSMITENTE,xPAIS_TRANSMITENTE,
		xDIRECCION_TRANSMITENTE,xNOMBRE_RE_TRANSMITENTE,xPOBLACION_RE_TRANSMITENTE,
		xPROVINCIA_RE_TRANSMITENTE,xCP_RE_TRANSMITENTE,xPAIS_RE_TRANSMITENTE,
		xDIRECCION_RE_TRANSMITENTE,v_Plusvalia.YEAR,

		xEMISOR,xTRIBUTO,xEJER_C60,xREFERENCIA,xIMP_CADENA,xDISCRI_PERIODO,
		xDIGITO_YEAR,xF_JULIANA,xDIGITO_C60_MODALIDAD2,xF_FIN_PE_VOL,

		'90521'||xEMISOR||xREFERENCIA||xDIGITO_C60_MODALIDAD2||xDISCRI_PERIODO||
		xTRIBUTO||xEJER_C60||xDIGITO_YEAR||xF_JULIANA||
		SUBSTR((SUBSTR(xIMP_CADENA,1,9)||
                     SUBSTR(xIMP_CADENA,11,2)),4,8)||'0',

		TO_CHAR(v_Plusvalia.FECHA_INICIAL, 'MM'), TO_CHAR(v_Plusvalia.FECHA_ACTUAL, 'MM'),
		xNIF_REPRE_FINAL,xNOMBRE_REPRE_FINAL,
		xNOMBRE_DESTINATARIO,xDIRECCION_DESTINATARIO,xCP_DESTINATARIO,
		xPOBLACION_DESTINATARIO,xPROVINCIA_DESTINATARIO,xNIF_DESTINATARIO,
		-- dirección del inmueble
		v_Plusvalia.VIA,v_Plusvalia.CALLE,v_Plusvalia.NUMERO,
		v_Plusvalia.ESCALERA,v_Plusvalia.PLANTA,v_Plusvalia.PUERTA,
		xNUM_FIJO,xNUM_SECUENCIAL,xPRIMER_CC,xSEGUN_CC,
		TO_char(SYSDATE,'dd')||' de '||rtrim(TO_char(SYSDATE,'month'))||' de '||
		TO_CHAR(SYSDATE,'yyyy'),
		
		xN_RESOLUCION, xF_RESOLUCION,xLIQUICOMPLE,xIMPCOMPLE);
END;
/


/*************************************************************************************
Fecha: 20/06/2002 Lucas Fernández Pérez.
Acción: Impresión de plusvalías. De una plusvalia o de todo un grupo, para su
        uso en los documentos.
        Procedimiento padre que llama a PROC_TABLA_PLUSVA una sola vez si el documento es 
        individual o varias veces si el documento es masivo.
-- Modificación: 10/05/2006. Agustín León Robles. Se puede imprimir plusvalias por grupos o una sola
*************************************************************************************/

CREATE OR REPLACE PROCEDURE PROC_DOCU_TABLA_PLUSVA(xID IN INTEGER)
AS
   CURSOR CGRUPO IS SELECT ID FROM VWPLUSVALIAS WHERE GRUPO=xID;
BEGIN

	--SE BORRAN LOS DATOS QUE PUEDA CONTENER TABLA_PLUSVA
	DELETE FROM TABLA_PLUSVA WHERE USUARIO=USER;

	IF xID < 0 THEN  -- Individual
		
		PROC_TABLA_PLUSVA(xID*-1);

	ELSE  -- Masivo

	   FOR V_Grupo IN CGRUPO LOOP
		PROC_TABLA_PLUSVA(V_Grupo.ID);
	   END LOOP;
	   
	END IF;

END;
/



-- *************************************************************************************************
-- Acción: Inserción de datos de requerimientos en tabla temporal.
-- Modificado: 29/04/2003. Lucas Fernández Pérez. Se añade el nombre de Notario
--	y las fechas se truncan para que no aparezca la hora.
-- Modificado: 17/09/2006. Lucas Fernández Pérez. Se cambia el parámetro xID por xGrupo, y se 
-- rellena la tabla temporal con un grupo de requerimientos. Se añaden campos de la dirección del deudor.
-- Modificado: 25/09/2006. Lucas Fernández Pérez. El campo deudor de la tabla requerir_plusva
--	 cambia su contenido: del nombre del deudor pasa a tener el nif del deudor.
-- Modificado: 29/09/2006. Lucas Fernández Pérez. Nuevo parámetro xMARCARIMPRESION para marcar
--   los requerimientos como con impresión de notificación emitida si el parámetro vale 'S'
--   Se graba en TABLA_REQUE_PLUSVA los nuevos campos con el domicilio fiscal
--					del adquiriente y del transmitente (antes solo grababa la calle).
-- Modificado: 05/02/2007. Lucas Fernández Pérez. Se accede al campo DOMICILIO de la nueva vista vwCONTRIBUYENTES
-- *************************************************************************************************

CREATE OR REPLACE PROCEDURE PROC_TABLA_REQUE_PLUSVA(xGRUPO IN INTEGER, xMARCARIMPRESION IN CHAR )
AS
	
	ID              INTEGER;
	PROTOCOLO		CHAR(10);
	POBLACION		VARCHAR(30);
	YEAR			CHAR(4);
	NOTARIO			INTEGER;
	EXPEDIENTE		CHAR(10);
	FECHA			DATE;
	OBJETO			VARCHAR(40);
	DIRECCION_OBJ	VARCHAR(40);
	FECHA_TRANS		DATE;
	TRANSMITENTE	CHAR(10);
	ADQUIRENTE		CHAR(10);
	DEUDOR			CHAR(10);
	NOTIFICADO		CHAR(1);
	F_NOTI			DATE;
	NOMBRE_TRANSMI		VARCHAR(40);
	DIRECCION_TRANSMI 	VARCHAR(60);
	CP_TRANSMI 		    CHAR(5);
	POBLACION_TRANSMI 	VARCHAR(35);
	PROVINCIA_TRANSMI 	VARCHAR(35);
	NOMBRE_ADQUI		VARCHAR(40);
	DIRECCION_ADQUI		VARCHAR(60);
	CP_ADQUI 		    CHAR(5);
	POBLACION_ADQUI 	VARCHAR(35);
	PROVINCIA_ADQUI  	VARCHAR(35);
	NOMBRE_DEUDOR	  	VARCHAR(40);
	DIRECCION_DEUDOR 	VARCHAR(60);
	CP_DEUDOR 		    CHAR(5);
	POBLACION_DEUDOR 	VARCHAR(35);
	PROVINCIA_DEUDOR  	VARCHAR(35);

    xNOMBRENOTA		VARCHAR2(40);

CURSOR C_REQUE_PLUSVA IS
   SELECT ID,PROTOCOLO,YEAR,NOTARIO,DEUDOR,EXPEDIENTE,FECHA,OBJETO,DIRECCION_OBJ,FECHA_TRANS,
	    TRANSMITENTE,ADQUIRENTE,NOTIFICADO,F_NOTI FROM REQUERIR_PLUSVA 
   WHERE GRUPO=xGRUPO;

BEGIN

  IF xMARCARIMPRESION='S' THEN -- Pone en los requerimientos la marca de que se ha impreso la notificación
  	UPDATE REQUERIR_PLUSVA SET NOTIFICADO='S', F_NOTI=TRUNC(SYSDATE) 
  	WHERE GRUPO=xGRUPO AND NOTIFICADO<>'S';
  END IF;

  /* SE BORRA TODOS LOS DATOS QUE PUEDA CONTENER TABLA_REQUE_PLUSVA */
  DELETE FROM TABLA_REQUE_PLUSVA WHERE USUARIO=USER;	

  OPEN C_REQUE_PLUSVA;
  
  LOOP
     FETCH C_REQUE_PLUSVA INTO ID,PROTOCOLO,YEAR,NOTARIO,DEUDOR,EXPEDIENTE,FECHA,OBJETO,
		DIRECCION_OBJ,FECHA_TRANS,TRANSMITENTE,ADQUIRENTE,NOTIFICADO,F_NOTI;

     EXIT WHEN C_REQUE_PLUSVA%NOTFOUND;

     BEGIN
        SELECT NOMBRE, DOMICILIO, CODIGO_POSTAL, POBLACION , PROVINCIA 
        INTO NOMBRE_ADQUI,DIRECCION_ADQUI,CP_ADQUI,POBLACION_ADQUI,PROVINCIA_ADQUI FROM vwCONTRIBUYENTES 
        WHERE NIF=ADQUIRENTE;

	  EXCEPTION
	     WHEN NO_DATA_FOUND THEN
		  NULL;
     END;

     BEGIN
        SELECT NOMBRE, DOMICILIO, CODIGO_POSTAL, POBLACION , PROVINCIA 
        INTO NOMBRE_TRANSMI,DIRECCION_TRANSMI,CP_TRANSMI,POBLACION_TRANSMI,PROVINCIA_TRANSMI FROM vwCONTRIBUYENTES 
        WHERE NIF=TRANSMITENTE;
	 
	  EXCEPTION
	     WHEN NO_DATA_FOUND THEN
		  NULL;
     END;

     BEGIN
        SELECT NOMBRE, DOMICILIO, CODIGO_POSTAL, POBLACION , PROVINCIA 
        INTO NOMBRE_DEUDOR,DIRECCION_DEUDOR,CP_DEUDOR,POBLACION_DEUDOR,PROVINCIA_DEUDOR FROM vwCONTRIBUYENTES 
        WHERE NIF=DEUDOR;
	 
	  EXCEPTION
	     WHEN NO_DATA_FOUND THEN
		  NULL;
     END;

     BEGIN
        SELECT POBLACION INTO POBLACION FROM DATOSPER 
        WHERE MUNICIPIO IN (SELECT MUNICIPIO FROM USUARIOSGT WHERE USUARIO=USER);
	 
	  EXCEPTION
	     WHEN NO_DATA_FOUND THEN
		  NULL;
     END;

     -- NOTARIO 
     SELECT NOMBRE INTO xNOMBRENOTA FROM NOTARIOS WHERE ID=NOTARIO;

     INSERT INTO TABLA_REQUE_PLUSVA 
       (ID,USUARIO,PROTOCOLO,POBLACION,YEAR,NOTARIO,NOMBRENOTA,DEUDOR,EXPEDIENTE,
       FECHA,OBJETO,DIRECCION_OBJ,
	  FECHA_TRANS,TRANSMITENTE,ADQUIRENTE,NOTIFICADO,F_NOTI,
	  NOMBRE_ADQUI, DIRECCION_ADQUI, CP_ADQUI, POBLACION_ADQUI, PROVINCIA_ADQUI, 
	  NOMBRE_TRANSMI, DIRECCION_TRANSMI, CP_TRANSMI, POBLACION_TRANSMI, PROVINCIA_TRANSMI, 
	  NOMBRE_DEUDOR, DIRECCION_DEUDOR, CP_DEUDOR, POBLACION_DEUDOR, PROVINCIA_DEUDOR)
     VALUES
	 (ID,USER,PROTOCOLO,POBLACION,YEAR,NOTARIO,xNOMBRENOTA,DEUDOR,EXPEDIENTE,
	  trunc(FECHA,'dd'),OBJETO,DIRECCION_OBJ,
	  trunc(FECHA_TRANS,'dd'),TRANSMITENTE,ADQUIRENTE,NOTIFICADO,F_NOTI,
	  NOMBRE_ADQUI, DIRECCION_ADQUI, CP_ADQUI, POBLACION_ADQUI, PROVINCIA_ADQUI, 
	  NOMBRE_TRANSMI, DIRECCION_TRANSMI, CP_TRANSMI, POBLACION_TRANSMI, PROVINCIA_TRANSMI, 
	  NOMBRE_DEUDOR, DIRECCION_DEUDOR, CP_DEUDOR, POBLACION_DEUDOR, PROVINCIA_DEUDOR);
  END LOOP; 
  CLOSE C_REQUE_PLUSVA; 
END;
/

/********************************************************************************
Acción: Añadir o modificar los datos de un notario.
Modificado: 07/09/2006. Lucas Fernández Pérez. Nuevo parámetro xCod_Notario
********************************************************************************/

CREATE OR REPLACE PROCEDURE ADDMOD_NOTARIO(
	 xID        IN    INTEGER,
	 xAYTO	IN	CHAR,
	 xNOMBRE 	IN	VARCHAR2,
	 xDIRECCION IN	VARCHAR2,
	 xPOBLACION IN	VARCHAR2,
	 xTELEFONO 	IN	CHAR,
	 xCOD_NOTARIO IN CHAR
)
AS     
BEGIN

   IF (xID <> 0) THEN
      UPDATE NOTARIOS SET NOMBRE=xNOMBRE,
				  DIRECCION=xDIRECCION,
				  POBLACION=xPOBLACION,
				  TELEFONO=xTELEFONO,
				  COD_NOTARIO=xCOD_NOTARIO
      WHERE ID=xID;
   ELSE
     INSERT INTO NOTARIOS 
	  (NOMBRE,MUNICIPIO,DIRECCION,POBLACION,TELEFONO,COD_NOTARIO)
     VALUES 
	  (xNOMBRE,xAYTO,xDIRECCION,xPOBLACION,xTELEFONO,xCOD_NOTARIO);
   END IF;

END;
/

/********************************************************************************
Acción: Añadir o modificar un requerimiento de una plusvalia no presentada por 
        el contribuyente.
********************************************************************************/

CREATE OR REPLACE PROCEDURE ADDMOD_REQUE(
	 xID			IN   INTEGER,
	 xAYTO    		IN	CHAR,
     xPROTOCOLO		IN	CHAR,
	 xNOTARIO		IN	INTEGER,
	 xDEUDOR		IN  CHAR,
	 xOBJETO 		IN	VARCHAR2,
	 xDIRECCION_OBJ IN	VARCHAR2,
	 xFECHA_TRANS 	IN	DATE,
	 xTRANSMITENTE 	IN	CHAR,
	 xADQUIRENTE 	IN	CHAR,
	 xCLASE			IN    CHAR,
	 xTITULO	    IN    CHAR,
	 xID_REQUE      OUT   INTEGER)
AS
	 xYEAR	CHAR(4);
BEGIN

	xYear:=to_char(xFECHA_TRANS,'yyyy');

	UPDATE REQUERIR_PLUSVA SET MUNICIPIO=xAYTO,NOTARIO=xNOTARIO,
		DEUDOR=xDEUDOR, OBJETO=xOBJETO,DIRECCION_OBJ=xDIRECCION_OBJ,
		FECHA_TRANS=xFECHA_TRANS,TRANSMITENTE=xTRANSMITENTE,ADQUIRENTE=xADQUIRENTE,
		CLASE=xCLASE,TITULO=xTITULO
	WHERE ID=xID;

	IF SQL%NOTFOUND THEN
		INSERT INTO REQUERIR_PLUSVA 
			(MUNICIPIO,PROTOCOLO,YEAR,NOTARIO,DEUDOR,OBJETO,DIRECCION_OBJ,FECHA_TRANS,
			TRANSMITENTE,ADQUIRENTE,CLASE,TITULO)
		VALUES 
			(xAYTO,xPROTOCOLO,xYEAR,xNOTARIO,xDEUDOR,xOBJETO,xDIRECCION_OBJ,xFECHA_TRANS,
			xTRANSMITENTE,xADQUIRENTE,xCLASE,xTITULO)
		RETURN ID INTO xID_REQUE;
	END IF;
END;
/

/********************************************************************************
Acción: Borrar un requerimiento.
********************************************************************************/

CREATE OR REPLACE PROCEDURE PLUSVA_BORRA_REQUE(
	 xID 	IN	INTEGER
)
AS

BEGIN
  DELETE FROM REQUERIR_PLUSVA  WHERE ID=xID;
  DELETE FROM TAREAS_REQUE WHERE ID_REQUE=xID;
END;
/ 

/********************************************************************************
Acción: Cambiar año de trabajo.
MODIFICACIÓN: 30/08/2001 Agustin Leon Robles.
		  Se ha añadido la opción de un municipio o todos para cambiar el año de trabajo.
MODIFICACIÓN: 20/03/2006. Gloria Maria Calle Hernandez. Cuando se cambia el año de trabajo se actualiza
		el contador de dicho concepto en la tabla Contador_Conceptos.
MODIFICACIÓN: 11/09/2006 Lucas Fernández Pérez.
		  nuevos parámetros xFormatoProtocolo y xFormatoExpediente
********************************************************************************/

CREATE OR REPLACE PROCEDURE PLUSVA_YEAR
		(xAYTO  			IN CHAR,
		xYEAR   			IN CHAR,
		xFORMATOPROTOCOLO  	IN CHAR,
		xFORMATOEXPEDIENTE 	IN CHAR,
		xTODOS				IN CHAR)
AS
BEGIN
	--TODOS LOS MUNICIPIOS
	IF xTODOS='S' THEN
		UPDATE DATOSPER SET 
			YEAR_PLUSVA=xYEAR, 
			PLUSVA_PROTOCOLO=UPPER(xFORMATOPROTOCOLO),
			PLUSVA_EXPEDIENTE=UPPER(xFORMATOEXPEDIENTE);
		UPDATE CONTADOR_CONCEPTOS C SET CONTADOR=(SELECT MAX(NUMERO)+1 FROM LIQUIDACIONES WHERE MUNICIPIO=C.MUNICIPIO AND CONCEPTO=C.CONCEPTO)
		WHERE CONCEPTO=(SELECT CONCEPTO FROM PROGRAMAS WHERE PROGRAMA='PLUSVALIA');
	--UN MUNICIPIO SOLO
	ELSE
		UPDATE DATOSPER SET 
			YEAR_PLUSVA=xYEAR ,
			PLUSVA_PROTOCOLO=UPPER(xFORMATOPROTOCOLO),
			PLUSVA_EXPEDIENTE=UPPER(xFORMATOEXPEDIENTE)
		WHERE MUNICIPIO=xAYTO;
		UPDATE CONTADOR_CONCEPTOS C SET CONTADOR=(SELECT MAX(NUMERO)+1 FROM LIQUIDACIONES WHERE MUNICIPIO=C.MUNICIPIO AND CONCEPTO=C.CONCEPTO)
		WHERE CONCEPTO=(SELECT CONCEPTO FROM PROGRAMAS WHERE PROGRAMA='PLUSVALIA') AND MUNICIPIO=xAYTO;
	END IF;
END;
/

/********************************************************************************
Acción: Indicar como se genera la liquidación asociada a la plusvalía.
Autor: 11/02/2003 Mª del Carmen Junco Gómez.		  
********************************************************************************/

CREATE OR REPLACE PROCEDURE PLUSVA_COMO_LIQUIDAR
		(xAYTO  	IN	CHAR,
		xCOMO   	IN 	INTEGER)		
AS
BEGIN	
   UPDATE DATOSPER SET COMO_LIQUIDAR_PLUSVA=xCOMO WHERE MUNICIPIO=xAYTO;	
END;
/

/********************************************************************************
Acción: Añadir una tarea a un requerimiento.
********************************************************************************/

CREATE OR REPLACE PROCEDURE ADD_TAREA_REQUE(
		xID_REQUE IN INTEGER,
	      xID_TAREA IN CHAR)
AS
BEGIN
   INSERT INTO TAREAS_REQUE (ID_REQUE,ID_TAREA)
   VALUES (xID_REQUE,xID_TAREA);
END;
/

/********************************************************************************
Acción: Añadir un titular para opción de multititulares.
********************************************************************************/
--
-- modificación: 17/01/2002 Antonio Pérez Caballero
--
CREATE OR REPLACE PROCEDURE ADD_TITULAR(
		xNIF		  CHAR,
		xNIF_REPRE    CHAR,
		xNOMBRE 	  CHAR,
		xNOMBRE_REPRE CHAR,
		xDIRE		  CHAR)
AS
  
   CONTADOR INTEGER;
   PORCENTAJE FLOAT;

BEGIN

   INSERT INTO MULTITITULARES (NIF,NIF_REPRE,NOMBRE,NOMBRE_REPRE,
   	                         DIRE)
   VALUES (xNIF,xNIF_REPRE,xNOMBRE,xNOMBRE_REPRE,xDIRE);

   /* contamos cuantos titulares hay para calcular de forma equitativa los 
      porcentajes de titularidad. Esta valor podrá modificarse en otro 
      punto del programa. Es sólo una propuesta */

   SELECT COUNT(*) INTO CONTADOR FROM MULTITITULARES WHERE USUARIO=USER;
   PORCENTAJE:=100/CONTADOR;
   UPDATE MULTITITULARES SET PORCEN_TITULARIDAD=PORCENTAJE WHERE USUARIO=USER;   

END;
/

/********************************************************************************
Acción: Borrar un titular.
********************************************************************************/
--
-- modificación: 17/01/2002 Antonio Pérez Caballero
--
CREATE OR REPLACE PROCEDURE DEL_TITULAR(xNIF IN  CHAR)		
AS
  
   CONTADOR INTEGER;
   PORCENTAJE FLOAT;

BEGIN

   DELETE FROM MULTITITULARES WHERE NIF=xNIF AND USUARIO=USER;

   /* contamos cuantos titulares hay para calcular de forma equitativa los 
      porcentajes de titularidad. Esta valor podrá modificarse en otro 
      punto del programa. Es sólo una propuesta */

   SELECT COUNT(*) INTO CONTADOR FROM MULTITITULARES WHERE USUARIO=USER;
   IF CONTADOR>0 THEN
      PORCENTAJE:=100/CONTADOR;
      UPDATE MULTITITULARES SET PORCEN_TITULARIDAD=PORCENTAJE WHERE USUARIO=USER;
   END IF;
  
END;
/

/********************************************************************************
Acción: Imprimir etiquetas.
MODIFICACIÓN: 14/09/2001 Lucas Fernández Pérez. Adaptación al euro.
Modificación: 09/02/2004 Mª Carmen Junco Gómez. Se añade un nuevo título: Compra Venta No residente,
 			   para cuando el transmitente sea extranjero. En ese caso el obligado al pago es
 			   el adquiriente.
Modificación: 05/02/2007. Lucas Fernández Pérez. Se accede al campo DOMICILIO de la nueva vista vwCONTRIBUYENTES
********************************************************************************/

CREATE OR REPLACE PROCEDURE Imprimir_Etiquetas(
		xMUNICIPIO IN CHAR,
		xDESDE     IN CHAR,
		xHASTA     IN CHAR,
		xGRUPO     IN INTEGER)
AS
	xSITUACION		VARCHAR2(60);
	xNIF			CHAR(10);
	xDOMICILIO        VARCHAR2(60);
	xVIA			CHAR(2);
	xCALLE		CHAR(30);
	xNUMERO		CHAR(5);
	xESCALERA		CHAR(2);
	xPLANTA		CHAR(3);
	xPUERTA		CHAR(2);
	xCOD_POSTAL		CHAR(5);
	xPOBLACION		CHAR(35);
	xPROVINCIA		CHAR(35);

	xTITULO		CHAR(20);
	xNOTARIO		VARCHAR2(40);


	xNOMBRE_ADQUIRIENTE VARCHAR2(40);
	xNOMBRE_TRANSMITENTE VARCHAR2(40);	
	xNOMBRE		VARCHAR2(40);  
    

	CURSOR cexpe IS SELECT EXPEDIENTE,FECHA,NIF_ADQUIRIENTE,NIF_TRANSMITENTE,TITULO,
			           NOTARIO,PROTOCOLO,VIA,CALLE,NUMERO,ESCALERA,PLANTA,PUERTA,
				     TOTAL_INGRESAR
	 		    FROM PLUSVALIAS
	 		    WHERE MUNICIPIO=xMUNICIPIO AND EXPEDIENTE BETWEEN xDesde AND xHasta;

	CURSOR cgrupo IS SELECT EXPEDIENTE,FECHA,NIF_ADQUIRIENTE,NIF_TRANSMITENTE,TITULO,
			           NOTARIO,PROTOCOLO,VIA,CALLE,NUMERO,ESCALERA,PLANTA,PUERTA,
				     TOTAL_INGRESAR
	 		    FROM PLUSVALIAS
	 		    WHERE MUNICIPIO=xMUNICIPIO AND GRUPO=xGRUPO;


BEGIN

   /* borramos de la tabla temporal los datos anteriormente introducidos por el usuario */
   DELETE FROM IMP_ETIQUETAS WHERE USUARIO=USER;

   
   if (xGRUPO=0) then    

      FOR v_expe IN cexpe
      LOOP 

   	   xSITUACION:=v_expe.VIA||' '||v_expe.CALLE||' '||v_expe.NUMERO||' '||
	  		   v_expe.ESCALERA||' '||v_expe.PLANTA||' '||v_expe.PUERTA;
	
	   IF (v_expe.TITULO='C') THEN 	
            xTITULO:='COMPRA-VENTA';
	        xNIF:=v_expe.NIF_TRANSMITENTE;	
	   ELSIF (v_expe.TITULO='R') THEN
	   		xTITULO:='CV NO RESIDENTE';
	   		xNIF:=v_expe.NIF_ADQUIRIENTE;
	   ELSIF (v_expe.TITULO='A') THEN	
            xTITULO:='APORTACIÓN SOCIAL';
	        xNIF:=v_expe.NIF_ADQUIRIENTE;	
       ELSIF (v_expe.TITULO='H') THEN
	        xTITULO:='HERENCIA';
	        xNIF:=v_expe.NIF_ADQUIRIENTE;	
	   ELSIF (v_expe.TITULO='D') THEN
	        xTITULO:='DONACIÓN'; 
	        xNIF:=v_expe.NIF_ADQUIRIENTE;
	   END IF;

	   /*ADQUIRENTE */
	   SELECT NOMBRE INTO xNOMBRE_ADQUIRIENTE
	   FROM CONTRIBUYENTES
	   WHERE NIF=v_expe.NIF_ADQUIRIENTE;

	   /*TRANSMITENTE*/
	   SELECT NOMBRE INTO xNOMBRE_TRANSMITENTE
	   FROM CONTRIBUYENTES
	   WHERE NIF=v_expe.NIF_TRANSMITENTE;

	   /* DATOS QUE HAN DE APARECER EN LOS ACUSES DE RECIBO (SUJETO PASIVO) */
	   SELECT NOMBRE,DOMICILIO,CODIGO_POSTAL,POBLACION,PROVINCIA
         INTO xNOMBRE,xDOMICILIO,xCOD_POSTAL,xPOBLACION,xPROVINCIA
	   FROM vwCONTRIBUYENTES
	   WHERE NIF=xNIF;


	   /* NOTARIO */

	   SELECT NOMBRE INTO xNOTARIO
	   FROM NOTARIOS 
	   WHERE ID=v_expe.NOTARIO;

	   INSERT INTO IMP_ETIQUETAS
	      (EXPEDIENTE,TITULO,SITUACION,NIF_ADQUI,NOMBRE_ADQUI,NIF_TRANSMI,NOMBRE_TRANSMI,
	       NOTARIO,FECHA,PROTOCOLO,EUROS,NIF,NOMBRE,DOMICILIO,CODPOSTAL,
	       POBLACION,PROVINCIA)
	   VALUES 
	      (v_expe.EXPEDIENTE,xTITULO,xSITUACION,v_expe.NIF_ADQUIRIENTE,xNOMBRE_ADQUIRIENTE,
	       v_expe.NIF_TRANSMITENTE,xNOMBRE_TRANSMITENTE,xNOTARIO,v_expe.FECHA,
	       v_expe.PROTOCOLO,v_expe.TOTAL_INGRESAR,xNIF,xNOMBRE,xDOMICILIO,xCOD_POSTAL,
	       xPOBLACION,xPROVINCIA);

      END LOOP;

   else

      FOR v_expe IN cgrupo
      LOOP 

   	   xSITUACION:=v_expe.VIA||' '||v_expe.CALLE||' '||v_expe.NUMERO||' '||
	  		   v_expe.ESCALERA||' '||v_expe.PLANTA||' '||v_expe.PUERTA;
	
	   IF (v_expe.TITULO='C') THEN 	
            xTITULO:='COMPRA-VENTA';
	        xNIF:=v_expe.NIF_TRANSMITENTE;	
	   ELSIF (v_expe.TITULO='R') THEN
	   		xTITULO:='CV NO RESIDENTE';
	   		xNIF:=v_expe.NIF_ADQUIRIENTE;
	   ELSIF (v_expe.TITULO='A') THEN	
            xTITULO:='APORTACIÓN SOCIAL';
	        xNIF:=v_expe.NIF_ADQUIRIENTE;	
         ELSIF (v_expe.TITULO='H') THEN
	        xTITULO:='HERENCIA';
	        xNIF:=v_expe.NIF_ADQUIRIENTE;	
	   ELSIF (v_expe.TITULO='D') THEN
	        xTITULO:='DONACIÓN'; 
	        xNIF:=v_expe.NIF_ADQUIRIENTE;
	   END IF;

	   /*ADQUIRENTE */
	   SELECT NOMBRE INTO xNOMBRE_ADQUIRIENTE
	   FROM CONTRIBUYENTES
	   WHERE NIF=v_expe.NIF_ADQUIRIENTE;

	   /*TRANSMITENTE*/
	   SELECT NOMBRE INTO xNOMBRE_TRANSMITENTE
	   FROM CONTRIBUYENTES
	   WHERE NIF=v_expe.NIF_TRANSMITENTE;

	   /* DATOS QUE HAN DE APARECER EN LOS ACUSES DE RECIBO (SUJETO PASIVO) */
	   SELECT NOMBRE,DOMICILIO,CODIGO_POSTAL,POBLACION,PROVINCIA
         INTO xNOMBRE,xDOMICILIO,xCOD_POSTAL,xPOBLACION,xPROVINCIA
	   FROM vwCONTRIBUYENTES
	   WHERE NIF=xNIF;

	   /* NOTARIO */

	   SELECT NOMBRE INTO xNOTARIO
	   FROM NOTARIOS 
	   WHERE ID=v_expe.NOTARIO;

	   INSERT INTO IMP_ETIQUETAS
	      (EXPEDIENTE,TITULO,SITUACION,NIF_ADQUI,NOMBRE_ADQUI,NIF_TRANSMI,NOMBRE_TRANSMI,
	       NOTARIO,FECHA,PROTOCOLO,EUROS,NIF,NOMBRE,DOMICILIO,CODPOSTAL,
	       POBLACION,PROVINCIA)
	   VALUES 
	      (v_expe.EXPEDIENTE,xTITULO,xSITUACION,v_expe.NIF_ADQUIRIENTE,xNOMBRE_ADQUIRIENTE,
	       v_expe.NIF_TRANSMITENTE,xNOMBRE_TRANSMITENTE,xNOTARIO,v_expe.FECHA,
	       v_expe.PROTOCOLO,v_expe.TOTAL_INGRESAR,xNIF,xNOMBRE,xDOMICILIO,xCOD_POSTAL,
	       xPOBLACION,xPROVINCIA);

      END LOOP;

   end if;

END;
/

/********************************************************************************
Acción: Crear, pegar o quitar una plusvalía de un grupo.
********************************************************************************/

CREATE OR REPLACE PROCEDURE CREA_PEGA_GRUPO_PLUSVA(
       xID 			IN INTEGER,
       xTIPO 		IN CHAR,
       xGRUPO 		IN OUT INTEGER)
AS
BEGIN

   if (xTipo='C') then
	ADD_COD_OPERACION(xGRUPO);
      UPDATE PLUSVALIAS SET GRUPO=xGRUPO WHERE ID=xID;
   END IF;

   if xTipo='P' then
      UPDATE PLUSVALIAS SET GRUPO=xGRUPO WHERE ID=xID;
   END IF;

   if xTipo='Q' then
      UPDATE PLUSVALIAS SET GRUPO=0 WHERE ID=xID;
   END IF;

END;
/

/****************************************************************************************************
AUTOR: Lucas Fernández Pérez. 21/09/2006.
Acción: Crear, pegar o quitar un requerimiento de plusvalía de un grupo.
********************************************************************************/
CREATE OR REPLACE PROCEDURE CREA_PEGA_GRUPO_REQUEPLUSVA(
       xID 			IN INTEGER,
       xTIPO 		IN CHAR,
       xGRUPO 		IN OUT INTEGER)
AS
BEGIN

   if (xTipo='C') then
	  ADD_COD_OPERACION(xGRUPO);
      UPDATE REQUERIR_PLUSVA SET GRUPO=xGRUPO WHERE ID=xID;
   END IF;

   if xTipo='P' then
      UPDATE REQUERIR_PLUSVA SET GRUPO=xGRUPO WHERE ID=xID;
   END IF;

   if xTipo='Q' then
      UPDATE REQUERIR_PLUSVA SET GRUPO=0 WHERE ID=xID;
   END IF;

END;
/

/****************************************************************************************************
AUTOR: Lucas Fernández Pérez. 11/09/2006.
FUNCION: Recibe un modelo del tipo YYYY/NNNN y devuelve el año y número siguiendo ese modelo.
		Ejemplo: xMODELO='YY/NNNN', xYEAR='2006', xNUMERO='34' -> DEVUELVE '06/0034'
*/
CREATE OR REPLACE FUNCTION GETNUMEROMODELADO(xMODELO IN CHAR, xYEAR IN CHAR, xNUMERO IN VARCHAR)
RETURN CHAR
AS
  xINDICE INTEGER;
  xLongitud      INTEGER;
  xInicioYear  	 BOOLEAN;
  xFinYear     	 BOOLEAN;
  xDigitosYear 	 INTEGER;
  xYearModelado VARCHAR(4);
  xInicioNum   	 BOOLEAN;
  xFinNum      	 BOOLEAN;
  xDigitosNum  	 INTEGER;
  xNumModelado   VARCHAR(10);
  xRESULTADO CHAR(10);
BEGIN
	
	xInicioYear:=FALSE;
	xFinYear:=FALSE;
	xDigitosYear:=0;
	xInicioNum:=FALSE;
	xFinNum:=FALSE;
	xDigitosNum:=0;
	xRESULTADO:='';
	xLongitud:=LENGTH(xMODELO);
	
	
	FOR xINDICE IN 1..xLongitud LOOP
		
	   IF SUBSTR(xMODELO,xINDICE,1)='Y' THEN
	      xInicioYear:=TRUE;
	      xDigitosYear:=xDigitosYear+1;
	      
	   	  IF xInicioNum=TRUE AND xFinNum=FALSE THEN
	   	     xFinNum:=TRUE;
		   	 xNumModelado:=SUBSTR(LPAD(xNUMERO,xLongitud,'0'),xLongitud+1-xDigitosNum,xDigitosNum);
	   	     xRESULTADO:=TRIM(xRESULTADO)||xNumModelado;
	   	  END IF;
	      
	   END IF;
	   
	   IF SUBSTR(xMODELO,xINDICE,1)='N' THEN
	      xInicioNum:=TRUE;
	      xDigitosNum:=xDigitosNum+1;
	      
	   	  IF xInicioYear=TRUE AND xFinYear=FALSE THEN
	   	     xFinYear:=TRUE;
	   	     xYearModelado:=SUBSTR(xYEAR,5-xDigitosYear,xDigitosYear);
	   	     xRESULTADO:=TRIM(xRESULTADO)||xYearModelado;
	   	  END IF;
	   	  
	   END IF;

	   IF SUBSTR(xMODELO,xINDICE,1)='/' THEN
	   
	   	  IF xInicioYear=TRUE AND xFinYear=FALSE THEN
	   	     xFinYear:=TRUE;
	   	     xYearModelado:=SUBSTR(xYEAR,5-xDigitosYear,xDigitosYear);
	   	     xRESULTADO:=TRIM(xRESULTADO)||xYearModelado||'/';
	   	  END IF;
	   
	   	  IF xInicioNum=TRUE AND xFinNum=FALSE THEN
	   	     xFinNum:=TRUE;
		   	 xNumModelado:=SUBSTR(LPAD(xNUMERO,xLongitud,'0'),xLongitud+1-xDigitosNum,xDigitosNum);
	   	     xRESULTADO:=TRIM(xRESULTADO)||xNumModelado||'/';
	   	  END IF;
	   	  
	   END IF;
	   	
		
	END LOOP;
	
	IF xInicioYear=TRUE AND xFinYear=FALSE THEN
		xYearModelado:=SUBSTR(xYEAR,5-xDigitosYear,xDigitosYear);
	   	xRESULTADO:=TRIM(xRESULTADO)||xYearModelado;
	END IF;
	   
	IF xInicioNum=TRUE AND xFinNum=FALSE THEN
	   	xNumModelado:=SUBSTR(LPAD(xNUMERO,xLongitud,'0'),xLongitud+1-xDigitosNum,xDigitosNum);
	   	xRESULTADO:=TRIM(xRESULTADO)||xNumModelado;
	END IF;

	RETURN xRESULTADO;

END;
/

/****************************************************************************************************
AUTOR: Lucas Fernández Pérez. 11/09/2006.
FUNCION: Calcula el protocolo de un municipio siguiendo un formato establecido a partir del año y número del disco.	    
*/
CREATE OR REPLACE FUNCTION GETPROTOCOLO(xAYTO IN CHAR, xYEAR IN CHAR, xNUMERO IN VARCHAR)
RETURN CHAR
AS
  xMODELO CHAR(10);
BEGIN
  SELECT PLUSVA_PROTOCOLO INTO xMODELO FROM DATOSPER WHERE MUNICIPIO=xAYTO;
  
  RETURN GETNUMEROMODELADO(xMODELO, xYEAR , xNUMERO);
  
END;
/

/****************************************************************************************************
AUTOR: Lucas Fernández Pérez. 11/09/2006.
FUNCION: Calcula el número de expediente automático de un municipio siguiendo un formato establecido 
			a partir del año y número del disco.	    
*/
CREATE OR REPLACE FUNCTION GETPLUSVAEXPE(xAYTO IN CHAR)
RETURN CHAR
AS
  xInicioYear  	 BOOLEAN;
  xFinYear     	 BOOLEAN;
  xDigitosYear 	 INTEGER;
  xYearProtocolo VARCHAR(4);
  xInicioNum   	 BOOLEAN;
  xFinNum      	 BOOLEAN;
  xDigitosNum  	 INTEGER;
  xNumProtocolo  VARCHAR(10);
  xPROTOCOLO 	 CHAR(10);

  xMODELO 		  CHAR(10);
  xLASTEXPEDIENTE CHAR(10);
  xINDICE 		  INTEGER;
  xInicioNumero   INTEGER;
  xFinNumero   	  BOOLEAN;
  xYEAR 		  CHAR(4);
  xNUMERO 		  CHAR(10);
  xExiste         INTEGER;
  
BEGIN

	SELECT YEAR_PLUSVA, PLUSVA_EXPEDIENTE INTO xYEAR,xMODELO 
	FROM DATOSPER WHERE MUNICIPIO=xAYTO;
	
	SELECT MAX(TRIM(EXPEDIENTE)),COUNT(*) INTO xLASTEXPEDIENTE, xExiste FROM PLUSVALIAS 
	WHERE ID=(SELECT MAX(ID) FROM PLUSVALIAS WHERE MUNICIPIO=xAYTO AND YEAR=xYEAR);

	if xExiste=0 then
	   xLastExpediente:='000000000';
	end if;

	xInicioNumero:=0;
	xFinNumero:=FALSE;
	xNUMERO:='';
	FOR xINDICE IN 1..9 LOOP
	   
	   IF SUBSTR(xMODELO,xINDICE,1)='N' THEN
	   	 IF xInicioNumero=0 THEN
	   	 	xInicioNumero:=xINDICE;
	   	 END IF;
	   END IF;
	   
	   IF ((SUBSTR(xMODELO,xINDICE,1)<>'N') AND (xInicioNumero>0) AND (xFinNumero=FALSE)) THEN
	   	 xNUMERO:=SUBSTR(xLASTEXPEDIENTE,xInicioNumero,xINDICE-xInicioNumero);
	   	 xFinNumero:=TRUE;
	   END IF;
	   
	END LOOP;
	
	IF (xFinNumero=FALSE) THEN
	   	 xNUMERO:=SUBSTR(xLASTEXPEDIENTE,xInicioNumero,10-xInicioNumero);
	END IF;		
	
	RETURN GETNUMEROMODELADO(xMODELO, xYEAR , TO_CHAR(TO_NUMBER(xNUMERO+1)));

END;
/

/****************************************************************************************************
AUTOR: Lucas Fernández Pérez. 11/09/2006.
FUNCION: Inserta o modifica un código de operación de fichero de plusvalías.

*/
CREATE OR REPLACE PROCEDURE ADD_UPD_CODOPE_PLUSVA(
			xAYTO IN CHAR,
			xCODOPE IN CHAR,
			xTITULO IN CHAR,
			xCLASE IN CHAR)
AS
 xCUANTOS INTEGER;
 
BEGIN

	SELECT COUNT(*) INTO xCUANTOS FROM COD_OPE_PLUSVALIAS WHERE AYTO=xAYTO AND CODIGO_OPERACION=xCODOPE;

	IF xCUANTOS>0 THEN -- Existe el código de operación, se modifica.
	
		UPDATE COD_OPE_PLUSVALIAS SET TITULO=xTITULO, CLASE=xCLASE WHERE AYTO=xAYTO AND CODIGO_OPERACION=xCODOPE;
	
	ELSE -- No existe el código de operación, se graba.
	
		INSERT INTO COD_OPE_PLUSVALIAS(AYTO, CODIGO_OPERACION, TITULO, CLASE) 
		VALUES(xAYTO, xCODOPE, xTITULO, xCLASE);
		
	END IF;

END;
/
/********************************************************************/
COMMIT;
/********************************************************************/
